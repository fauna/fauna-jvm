plugins {
    id 'java'
    // this is a hopefully temporary plugin until maven central can add official gradle support
    id 'com.vanniktech.maven.publish' version '0.29.0'
}

group = 'com.fauna'

compileJava {
    options.encoding = 'UTF-8'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation 'junit:junit:4.13.2'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
}

mavenPublishing {
    publishToMavenCentral(com.vanniktech.maven.publish.SonatypeHost.CENTRAL_PORTAL)
    signAllPublications()

    coordinates(project.group, project.name, project.version)

    def githubRepo = "github.com/fauna/${project.name}"

    pom {
        name = project.name
        description = 'JVM driver for Fauna'
        url = "https://${githubRepo}"
        licenses {
            license {
                name = 'MPL 2.0'
                url = 'https://www.mozilla.org/en-US/MPL/2.0/'
                distribution = 'repo'
            }
        }
        developers {
            developer {
                name = 'Fauna Engineering'
                id = 'production@fauna.com'
                organization = 'fauna.com'
                organizationUrl = 'https://fauna.com'
            }
        }
        scm {
            url = 'https://${githubRepo}'
            connection = "scm:git:git://${githubRepo}.git"
            developerConnection = "scm:git:git://${githubRepo}.git"
        }

        issueManagement {
            system = 'GitHub'
            url = "https://${githubRepo}/issues"
        }
    }
}

// tasks

task printVersion {
    doLast {
        println project.version
    }
}

task writeProps(type: WriteProperties) {
    outputFile = file("src/main/resources/version.properties")
    encoding = 'UTF-8'
    property('version', project.version)
    property('name', project.name)
    property('group', project.group)
}
processResources.dependsOn(writeProps)
